//{ Driver Code Starts
import java.util.*;
import java.io.*;

public class Main{
    static BufferedReader br;
    static PrintWriter ot;
    public static void main(String[] args) throws IOException{
        br = new BufferedReader(new InputStreamReader(System.in));
        ot = new PrintWriter(System.out);

        int t = Integer.parseInt(br.readLine().trim());

        while(t-- > 0){
            String s[] = br.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]), m = Integer.parseInt(s[1]);
            int edges[][] = new int[m][3];
            for(int i = 0; i < m; i++){
                s = br.readLine().trim().split(" ");
                edges[i][0] = Integer.parseInt(s[0]);
                edges[i][1] = Integer.parseInt(s[1]);
                edges[i][2] = Integer.parseInt(s[2]);
            }

            List<Integer> list = new Solution().shortestPath(n, m, edges);
            
            ot.println(list.get(0));
            if(list.get(0) != -1 && !check(list, edges))
                ot.println(-1);
        }
        ot.close();
    }
    static boolean check(List<Integer> list, int edges[][]){
        Set<Integer> hs = new HashSet<>();
        Map<Integer, Map<Integer, Integer>> hm = new HashMap<>();
        for(int i = 1; i < list.size(); i++)
            hs.add(list.get(i));
        for(int x[] : edges){
            if(hs.contains(x[0]) || hs.contains(x[1])){
                if(!hm.containsKey(x[0]))
                    hm.put(x[0], new HashMap<>());
                if(!hm.containsKey(x[1]))
                    hm.put(x[1], new HashMap<>());
                hm.get(x[0]).put(x[1], x[2]);
                hm.get(x[1]).put(x[0], x[2]);
            }
        }
        int sum = 0;
        for(int i = 1; i < list.size() - 1; i++){
            if(!hm.containsKey(list.get(i)) || !hm.get(list.get(i)).containsKey(list.get(i + 1)))
                return false;
            sum += hm.get(list.get(i)).get(list.get(i + 1));
        }
        return sum == list.get(0);
    }
} 

// } Driver Code Ends

class Pair{
    int distance;
    int node;
    Pair(int distance, int node)
    {
        this.distance=distance;
        this.node=node;
    }
}
class Solution{
    public List<Integer> shortestPath(int n, int m, int edges[][]){
        //  Code Here.
        ArrayList<ArrayList<Pair>>adj=new ArrayList<>();
        for (int i = 0; i <= n; i++) {
    adj.add(new ArrayList<>());
}

for (int i = 0; i < m; i++) {
          adj.get(edges[i][0]).add(new Pair(edges[i][1],edges[i][2]));
            adj.get(edges[i][1]).add(new Pair(edges[i][0],edges[i][2]));
}
        int []parent=new int[n+1];
        for(int i=0;i<=n;i++)
        {
            parent[i]=i;
        }
        int arr[]=new int[n+1];
        Arrays.fill(arr,Integer.MAX_VALUE);
        arr[0]=0;
        arr[1]=0;
        parent[1]=1;
        PriorityQueue<Pair>pq=new PriorityQueue<>((p1,p2)->{
            int x=Integer.compare(p1.distance,p2.distance);
            return x==0?Integer.compare(p1.node,p2.node):x;
        });
        List<Integer>li=new ArrayList<>();
        pq.offer(new Pair(0,1));
        while(!pq.isEmpty())
        {
            int size=pq.size();
            for(int i=0;i<size;i++){
                Pair p=pq.poll();
                int dis=p.distance;
                int nod=p.node;
                for(Pair pp:adj.get(nod))
                {
                    int dis1=pp.distance;
                    int nod1=pp.node;
                    if(dis1+dis<arr[nod1])
                    {
                        arr[nod1]=dis+dis1;
                        parent[nod1]=nod;
                        pq.offer(new Pair(dis+dis1,nod1));
                    }
                    
                }
                
            }
        }
        if(arr[n]==Integer.MAX_VALUE)
        {
            li.add(-1);
            return li;
        }
    int x=n;
    while(x!=parent[x])
    {
        li.add(x);
        x=parent[x];
    }
    li.add(1);
  Collections.reverse(li);
    return li;
      
       
                
        
        
    }
}